import pandas as pd
from pandas import ExcelWriter
from pandas import ExcelFile
from collections import OrderedDict
from math import log, sqrt
import numpy as np
from bokeh.plotting import figure, show, output_file
import bokeh.palettes as palet
from bokeh.io import export_svgs

# function definitions
def innerRangeCreator(dim, begin,end,spacing):
    rang=[]
    colSpacing=(end-begin+spacing)/dim
    for i in range(dim):
        rang.append(colSpacing*(i)+begin)
    return rang
def outerRangeCreator(dim, begin,end,spacing):
    rang=[]
    colSpacing=(end-begin+spacing)/dim
    for i in range(dim):
        rang.append(colSpacing*(i+1)+begin-spacing)
    return rang
def spec_dim_gen(dim,spacing,y):
    dims=[]
    for i in range(dim):
        dims.append(y-spacing*i)
    return dims

# get data from excel file
df = pd.read_excel('Bench.xlsx', sheet_name='Data')
print("Column headings:")
print(df.columns)
# get Config variables
config=pd.read_excel('Bench.xlsx', sheet_name='config')
#plot config var
width =                 config.values[0][1]
height =                config.values[1][1]
#wedge config var
begin=                  config.values[3][1]
end=                    config.values[4][1]
linSpacing=             config.values[5][1]
angSpacing=             config.values[6][1]
#brand Header var
brandsSpacing=          config.values[8][1]
brandHeaderFontSize=    config.values[9][1]
brandHeaderX=           config.values[10][1]
brandHeaderY=           config.values[11][1]
brandHeader=            str(config.values[12][1])
#brand var
brandX=                 config.values[14][1]
brandY=                 config.values[15][1]
brandFontSize=          config.values[16][1]
#brand rext var
brandRectX=             config.values[18][1]
brandRectWidth=         config.values[19][1]
brandRectHeight=        config.values[20][1]
#spec var
specY=                  config.values[22][1]
specTextX=              config.values[23][1]
specTextFontSize=       config.values[24][1]
specSpacing=            config.values[25][1]
specIndexX=             config.values[26][1]
specIndexFontSize=      config.values[27][1]
#spec header var
specHeaderX=            config.values[29][1]
specHeaderY=            config.values[30][1]
specHeader=         str(config.values[31][1])
specHeaderFontSize=     config.values[32][1]
#nums Around specs
numsAroundSpacing=      config.values[34][1]
numsAroundFontSize=     config.values[35][1]
#rotate num
rotateNum=              config.values[37][1]





#set data variables
data=df.values==1
specs=df.axes[0]
brands=df.axes[1]
num_brands=len(brands)
num_specs=len(specs)

 # sort data
sum_4brands=np.sum(data,0)
sum_4specs=np.sum(data,1)

sorted_data0=np.array(np.zeros([len(sum_4specs),len(sum_4brands)]))

sum_4brands=np.sum(data,0)
sorted_index_brands=sorted(range(len(sum_4brands)), key=lambda k: sum_4brands[k])
sorted_data0=data[:,sorted_index_brands]

sorted_data=np.array(np.zeros([len(sum_4specs),len(sum_4brands)]))

sum_4specs=np.sum(sorted_data0,1)
sorted_index_specs=sorted(range(len(sum_4specs)), key=lambda k: sum_4specs[k])
inv_sorted_index_specs=sorted_index_specs[::-1]
data=sorted_data0[inv_sorted_index_specs,:]
#get colors

colorEx=pd.read_excel('Bench.xlsx', sheet_name='color')
colors=[]
if(len(colorEx.values)==len(brands)):
    for brand in range(len(brands)):
        colors.append(colorEx.values[brand][0])
else:
    colors=palet.plasma(len(brands))

#order colors
newcol=[]
for brand in range(len(brands)):
    newcol.append(colors[sorted_index_brands[brand]])
colors=newcol

#set and initialize plot variables

p = figure(plot_width=width, plot_height=height, title="",
    x_axis_type=None, y_axis_type=None,
    x_range=(-350, 770), y_range=(-550, 550),
    min_border=0, outline_line_color="black",
    background_fill_color=None, border_fill_color=None,
    toolbar_sticky=False)

p.xgrid.grid_line_color = None
p.ygrid.grid_line_color = None
p.output_backend = "svg"

# calculate angles and dimensions
big_angle = 2.0 * np.pi / (len(sum_4specs))
angles=[]
for spec in range(num_specs):
    angles.append(np.pi/2 + big_angle/2 - spec*big_angle+rotateNum*big_angle)

inner_radius = innerRangeCreator(num_brands,begin,end,linSpacing)
outer_radius = outerRangeCreator(num_brands,begin,end,linSpacing)

# draw wedges
for brand in range(0,num_brands):
    brandi=num_brands-brand-1
    for spec in range(0,num_specs) :
        if(data[spec,brandi]):
            print("done")
            p.wedge(0, 0,outer_radius[brandi],
                       -big_angle+angles[spec]-big_angle*(0.5-angSpacing), -big_angle+angles[spec]+big_angle*(0.5-angSpacing), color=colors[brandi])
            p.wedge(0, 0,inner_radius[brandi],
                       -big_angle+angles[spec]-big_angle*(0.5+angSpacing/2), -big_angle+angles[spec]+big_angle*(0.5+angSpacing/2), color="white")

for spec in range(0,num_specs) :
    p.wedge(0, 0,end,
                       angles[spec]+big_angle*0.4,angles[spec]+big_angle*0.6, color="white")

p.circle(x=0,y=0,size=begin,color="white")
 # arrange labels
newbra=[]
for brand in range(len(brands)):
    newbra.append(brands[sorted_index_brands[brand]])
brands=newbra

newspec=[]
for spec in range(len(specs)):
    newspec.append(specs[sorted_index_specs[spec]])
specs=newspec
#lebel brands
p.text(brandHeaderX, brandHeaderY, text=[brandHeader],
   text_font_size=str(brandHeaderFontSize)+"pt", text_align="left", text_baseline="middle",text_font_style="bold")
#draw rect
brand_dim=spec_dim_gen(num_brands,brandsSpacing,brandY)
for i in range(num_brands):
    p.rect(brandRectX,brand_dim[i] , width=brandRectWidth, height=brandRectHeight,
           color=colors[num_brands-i-1])
#write Brands

p.text(brandX, brand_dim, text=list(brands[::-1]),
   text_font_size=str(brandFontSize)+"pt", text_align="left", text_baseline="middle",text_font_style="bold")

#label specs

spec_dim=spec_dim_gen(num_specs,specSpacing,specY)


p.text(specIndexX, spec_dim, text= np.arange(1,num_specs+1),
   text_font_size=str(specIndexFontSize)+"pt", text_align="left", text_baseline="middle",text_font_style="bold")
p.text(specTextX, spec_dim, text= specs[::-1],
   text_font_size=str(specTextFontSize)+"pt", text_align="left", text_baseline="middle")
p.text(specHeaderX, specHeaderY, text=[specHeader] ,
   text_font_size=str(specHeaderFontSize)+"pt", text_align="left", text_baseline="middle",text_font_style="bold")


# nums labels

xr = (end+numsAroundSpacing)*np.cos(np.array( angles)-big_angle)
yr = (end+numsAroundSpacing)*np.sin(np.array( angles)-big_angle)


#numbers around
p.text(xr, yr, np.arange(1,num_specs+1),angle=0,
       text_font_size=str(numsAroundFontSize)+"pt", text_align="center", text_baseline="middle",text_font_style="bold")




# output part
output_file("Benchmark.html", title="Benchmark.py ")



show(p)
